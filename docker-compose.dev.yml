# QCK Core - OSS Docker Compose Configuration (Development)
# Open source version with core features only

services:
  # ============================================================================
  # NGINX Router - OSS Entry Point
  # ============================================================================
  nginx-router-oss-dev:
    image: nginx:alpine
    container_name: nginx-router-oss-dev
    ports:
      - "10180:8080"  # OSS access port
    volumes:
      - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
    tmpfs:
      - /var/cache/nginx:uid=101,gid=101
    depends_on:
      - qck-core-oss-dev
      - qck-dashboard-oss-dev
    networks:
      - qck-core-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # QCK DASHBOARD - OSS Frontend Service (:3000)
  # ============================================================================
  qck-dashboard-oss-dev:
    build:
      context: ./qck-dashboard
      dockerfile: Dockerfile
    container_name: qck-dashboard-oss-dev
    # Internal port 3000 - accessed via nginx only
    
    env_file:
      - .env.dev
    
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:10180/api
      - NEXT_PUBLIC_APP_URL=http://localhost:10180
      - NEXTAUTH_SECRET=dev-dashboard-secret-change-me-32chars-minimum
      - NEXTAUTH_URL=http://localhost:10180
      # Required dashboard environment variables
      - NEXT_PUBLIC_PASSWORD_RESET_TOKEN_MIN_LENGTH=32
      - NEXT_PUBLIC_PASSWORD_RESET_TOKEN_FORMAT_REGEX=^[a-zA-Z0-9]{32,}$
      - NEXT_PUBLIC_APP_NAME=QCK
      - NEXT_PUBLIC_ENVIRONMENT=development
      - NEXT_PUBLIC_ENABLE_ANALYTICS=true
      - NEXT_PUBLIC_ENABLE_SENTRY=false
      - NEXT_PUBLIC_MAINTENANCE_MODE=false
      - NEXT_PUBLIC_LOG_LEVEL=debug
      - NEXT_PUBLIC_JWT_ACCESS_EXPIRY=3600
      - NEXT_PUBLIC_JWT_REFRESH_EXPIRY=86400
      - NEXT_PUBLIC_API_TIMEOUT=30000
      - NEXT_PUBLIC_PASSWORD_RESET_SUCCESS_REDIRECT_DELAY_MS=3000
      # OSS Configuration
      - NEXT_PUBLIC_IS_OSS=true
      - NEXT_PUBLIC_SHORT_BASE_URL=http://localhost:10180
    
    depends_on:
      - qck-core-oss-dev
    
    volumes:
      - ./qck-dashboard:/app
      - /app/node_modules
      - /app/.next
    
    networks:
      - qck-core-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # QCK CORE - OSS Backend Service (:8080)
  # ============================================================================
  qck-core-oss-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: qck-core-oss-dev
    # Internal port 8080 - accessed via nginx only
    
    env_file:
      - .env.dev
    
    # OSS environment variables (override from .env.dev)
    environment:
      - RUST_LOG=qck_core=debug,axum=info
      # Use container hostnames instead of localhost
      - DATABASE_URL=postgresql://qck_dev_user:dev_password_2024@qck-postgres-oss-dev:5432/qck_dev_db
      - REDIS_URL=redis://qck-redis-oss-dev:6379
      - CLICKHOUSE_URL=http://qck-clickhouse-oss-dev:8123
      - ENABLE_SWAGGER_UI=true  # Enable docs for OSS users
      - BIND_ADDRESS=0.0.0.0:8080
      # OSS-only features enabled
      - FEATURES=core,analytics,basic-limits
    
    depends_on:
      qck-postgres-oss-dev:
        condition: service_healthy
      qck-redis-oss-dev:
        condition: service_healthy
      qck-clickhouse-oss-dev:
        condition: service_healthy
    
    volumes:
      - ./qck-backend:/app
      - cargo-cache-oss-dev:/usr/local/cargo/registry
      - cargo-git-oss-dev:/usr/local/cargo/git
      - target-cache-oss-dev:/app/target
    
    networks:
      - qck-core-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # SHARED DATABASE SERVICES - OSS Configuration
  # ============================================================================
  
  # PostgreSQL Database
  qck-postgres-oss-dev:
    image: postgres:16-alpine
    container_name: qck-postgres-oss-dev
    env_file:
      - .env.dev
    environment:
      - POSTGRES_DB=qck_dev_db
      - POSTGRES_USER=qck_dev_user
      - POSTGRES_PASSWORD=dev_password_2024
    volumes:
      - postgres-data-oss-dev:/var/lib/postgresql/data
    networks:
      - qck-core-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qck_dev_user -d qck_dev_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  qck-redis-oss-dev:
    image: redis:7.2-alpine
    container_name: qck-redis-oss-dev
    command: redis-server --appendonly yes
    volumes:
      - redis-data-oss-dev:/data
    networks:
      - qck-core-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ClickHouse Analytics Database
  qck-clickhouse-oss-dev:
    image: clickhouse/clickhouse-server:23.12
    container_name: qck-clickhouse-oss-dev
    env_file:
      - .env.dev
    environment:
      - CLICKHOUSE_DB=qck_analytics
      - CLICKHOUSE_USER=qck_user
      - CLICKHOUSE_PASSWORD=qck_password
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    volumes:
      - clickhouse-data-oss-dev:/var/lib/clickhouse
    networks:
      - qck-core-network
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Adminer - Database Management UI (Development only)
  qck-adminer-oss-dev:
    image: adminer:latest
    container_name: qck-adminer-oss-dev
    ports:
      - "10181:8080"  # OSS users can access DB management
    networks:
      - qck-core-network
    env_file:
      - .env.dev
    environment:
      - ADMINER_DEFAULT_SERVER=qck-postgres-oss-dev
    restart: unless-stopped

networks:
  qck-core-network:
    driver: bridge

volumes:
  postgres-data-oss-dev:
  redis-data-oss-dev:
  clickhouse-data-oss-dev:
  cargo-cache-oss-dev:
  cargo-git-oss-dev:
  target-cache-oss-dev: