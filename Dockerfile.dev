# QCK Core - OSS Development Dockerfile
FROM rust:1.82-slim as builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libpq-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy Cargo files
COPY Cargo.toml Cargo.lock ./

# Copy workspace member source
COPY qck-backend/ ./qck-backend/

# Create dummy main to build dependencies  
RUN mkdir -p qck-backend/src/bin && echo "fn main() {}" > qck-backend/src/bin/qck-core.rs

# Build dependencies (cache layer)
RUN cargo build --release --bin qck-core
RUN rm qck-backend/src/bin/qck-core.rs

# Copy real source (already copied above, this is redundant)
# COPY src ./src/

# Build the application
RUN cargo build --release --bin qck-core

# Runtime stage
FROM rust:1.82-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libssl-dev \
    libpq5 \
    ca-certificates \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN useradd -m -u 1000 appuser

# Set working directory
WORKDIR /app

# Copy built application
COPY --from=builder /app/target/release/qck-core /usr/local/bin/qck-core

# Create app user
USER appuser

# Expose port 8080 for core service
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:8080/v1/health || exit 1

# Use the built binary directly for OSS
CMD ["qck-core"]