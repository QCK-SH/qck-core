# QCK Core - OSS Development Nginx Configuration
# Simple configuration for open source deployment (qck-core only)

# Cache configuration for short URL redirects
proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=shorturl_cache:10m max_size=100m inactive=60m use_temp_path=off;

# ============================================================================
# UPSTREAM CONFIGURATION - OSS Only
# ============================================================================

# Core backend service (qck-core only)
upstream core_backend {
    server qck-core-oss-dev:8080;
}

# Dashboard frontend service (qck-dashboard)
upstream dashboard_backend {
    server qck-dashboard-oss-dev:3000;
}

# ============================================================================
# MAIN SERVER CONFIGURATION
# ============================================================================

server {
    listen 8080;
    server_name localhost;
    
    # Fix redirect URLs to use proper port
    absolute_redirect off;
    
    # Development buffer sizes
    client_max_body_size 100M;
    client_body_buffer_size 128k;
    proxy_buffer_size 4k;
    proxy_buffers 4 32k;
    proxy_busy_buffers_size 64k;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # ============================================================================
    # HEALTH CHECK
    # ============================================================================
    location = /health {
        access_log off;
        add_header 'Content-Type' 'application/json';
        return 200 '{"status":"healthy","service":"nginx-router-oss","architecture":"qck-core-only"}';
    }
    
    # Core backend health check
    location = /health/core {
        proxy_pass http://core_backend/v1/health;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        access_log off;
    }
    
    # ============================================================================
    # CORE API ROUTES - All /api/v1/* routes go to qck-core
    # ============================================================================
    location ^~ /api/ {
        # Remove /api prefix when proxying to backend
        rewrite ^/api/(.*)$ /$1 break;
        
        proxy_pass http://core_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Fix redirects from backend to include /api prefix
        proxy_redirect / /api/;
        
        # Important for Swagger UI (if enabled in development)
        proxy_buffering off;
        
        # Add service header for debugging
        add_header X-Service-Route "qck-core-oss" always;
    }
    
    # ============================================================================
    # DASHBOARD FRONTEND - Next.js Application
    # ============================================================================
    # Next.js static assets
    location ^~ /_next {
        proxy_pass http://dashboard_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_cache_bypass $http_upgrade;
        add_header X-Service-Route "qck-dashboard-oss" always;
    }
    
    # Favicon and other static assets
    location = /favicon.ico {
        proxy_pass http://dashboard_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        add_header X-Service-Route "qck-dashboard-oss" always;
    }
    
    # Dashboard health check proxy
    location = /health/dashboard {
        proxy_pass http://dashboard_backend/health.json;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        access_log off;
    }
    
    # ============================================================================
    # SHORT URL REDIRECTS - qck-core handles this
    # ============================================================================
    location ~ "^/([a-zA-Z0-9]{3,20})$" {
        proxy_pass http://core_backend/$1;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Cache configuration - Only cache 404s to prevent abuse, analytics tracking for redirects
        proxy_cache shorturl_cache;
        proxy_cache_key "$host$request_uri";
        # proxy_cache_valid 301 308 5m;  # Permanent redirects - DISABLED for analytics
        # proxy_cache_valid 302 307 2m;  # Temporary redirects - DISABLED for analytics
        proxy_cache_valid 404 1m;       # Cache 404s briefly to prevent abuse
        add_header X-Cache-Status $upstream_cache_status;  # Debug header
        add_header X-Service-Route "qck-core-oss" always;
        
        # Follow redirects from the backend
        proxy_intercept_errors off;
        proxy_redirect off;
    }
    
    # ============================================================================
    # DASHBOARD APPLICATION - Default route for OSS users
    # ============================================================================
    location / {
        proxy_pass http://dashboard_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
        proxy_set_header Accept-Encoding gzip;
        add_header X-Service-Route "qck-dashboard-oss" always;
    }
    
    # ============================================================================
    # ERROR PAGES
    # ============================================================================
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
}